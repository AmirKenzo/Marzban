"""init settings

Revision ID: 9af04c077ede
Revises: beb47f520963
Create Date: 2025-05-08 19:01:36.454848

"""
from alembic import op
import sqlalchemy as sa

import json
import config


# revision identifiers, used by Alembic.
revision = "9af04c077ede"
down_revision = "beb47f520963"
branch_labels = None
depends_on = None


telegram = {
    "enable": True if config.TELEGRAM_API_TOKEN else False,
    "token": config.TELEGRAM_API_TOKEN,
    "webhook_url": config.TELEGRAM_WEBHOOK_URL,
    "webhook_secret": config.TELEGRAM_WEBHOOK_SECRET_KEY,
    "proxy_url": config.TELEGRAM_PROXY_URL,
}

webhook = {
    "enable": True if config.WEBHOOK_ADDRESS else False,
    "webhooks": [{"url": url, "secret": config.WEBHOOK_SECRET} for url in config.WEBHOOK_ADDRESS],
    "days_left": config.NOTIFY_DAYS_LEFT,
    "usage_percent": config.NOTIFY_REACHED_USAGE_PERCENT,
    "timeout": config.RECURRENT_NOTIFICATIONS_TIMEOUT,
    "recurrent": config.NUMBER_OF_RECURRENT_NOTIFICATIONS,
    "proxy_url": config.WEBHOOK_PROXY_URL,
}

notfication_settings = {
    "notify_telegram": config.TELEGRAM_NOTIFY,
    "notify_discord": True if config.DISCORD_WEBHOOK_URL else False,

    "telegram_api_token": config.TELEGRAM_API_TOKEN,
    "telegram_admin_id": config.TELEGRAM_ADMIN_ID,
    "telegram_channel_id": config.TELEGRAM_LOGGER_CHANNEL_ID,
    "telegram_topic_id": config.TELEGRAM_LOGGER_TOPIC_ID,

    "discord_webhook_url": config.DISCORD_WEBHOOK_URL,

    "proxy_url": config.NOTIFICATION_PROXY_URL,

    "max_retries": 3,
}

notfication_enable = {
    "admin": True,
    "core": True,
    "group": True,
    "host": True,
    "login":  True,
    "node":  True,
    "user": True,
    "user_template": True,
    "days_left": True,
    "percentage_reached": True,
}

rules = [
    {
        "pattern": r"^([Cc]lash[\-\.]?[Vv]erge|[Cc]lash[\-\.]?[Mm]eta|[Ff][Ll][Cc]lash|[Mm]ihomo)",
        "target": "clash_meta"
    },
    {
        "pattern": r"^([Cc]lash|[Ss]tash)",
        "target": "clash"
    },
    {
        "pattern": r"^(SFA|SFI|SFM|SFT|[Kk]aring|[Hh]iddify[Nn]ext)|.*[Ss]ing[\-b]?ox.*",
        "target": "sing_box"
    },
    {
        "pattern": r"^(SS|SSR|SSD|SSS|Outline|Shadowsocks|SSconf)",
        "target": "outline"
    },
    {
        "pattern": r"^v2rayN",
        "target": "xray" if config.USE_CUSTOM_JSON_DEFAULT or config.USE_CUSTOM_JSON_FOR_V2RAYN else "links_base64"
    },
    {
        "pattern": r"^v2rayNG",
        "target": "xray" if config.USE_CUSTOM_JSON_DEFAULT or config.USE_CUSTOM_JSON_FOR_V2RAYNG else "links_base64"
    },
    {
        "pattern": r"^[Ss]treisand",
        "target": "xray" if config.USE_CUSTOM_JSON_DEFAULT or config.USE_CUSTOM_JSON_FOR_STREISAND else "links_base64"
    },
    {
        "pattern": r"^Happ",
        "target": "xray" if config.USE_CUSTOM_JSON_DEFAULT or config.USE_CUSTOM_JSON_FOR_HAPP else "links_base64"
    },
    {
        "pattern": r"^ktor\-client",
        "target": "xray" if config.USE_CUSTOM_JSON_DEFAULT or config.USE_CUSTOM_JSON_FOR_NPVTUNNEL else "links_base64"
    },
    {
        "pattern": r"^.*",  # Default catch-all pattern
        "target": "links_base64"
    }
]

manual_sub_request = {
    "links": True,
    "links_base64": True,
    "xray": True,
    "sing_box": True,
    "clash": True,
    "clash_meta": True,
    "outline": True,
}

subscription = {
    "url_prefix": config.XRAY_SUBSCRIPTION_URL_PREFIX,
    "update_interval": config.SUB_UPDATE_INTERVAL,
    "support_url": config.SUB_SUPPORT_URL,
    "profile_title": config.SUB_PROFILE_TITLE,

    "host_status_filter": config.HOST_STATUS_FILTER,

    "rules": rules,
    "manual_sub_request": manual_sub_request
}

base_settings = {
    "telegram": telegram,
    "discord": None,
    "webhook": webhook,
    "notfication_settings": notfication_settings,
    "notfication_enable": notfication_enable,
    "subscription": subscription,
}

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table("settings",
    sa.Column("id", sa.Integer(), nullable=False),
    sa.Column("telegram", sa.JSON(none_as_null=True), nullable=True),
    sa.Column("discord", sa.JSON(none_as_null=True), nullable=True),
    sa.Column("webhook", sa.JSON(none_as_null=True), nullable=True),
    sa.Column("notfication_settings", sa.JSON(), nullable=False),
    sa.Column("notfication_enable", sa.JSON(), nullable=False),
    sa.Column("subscription", sa.JSON(), nullable=False),
    sa.PrimaryKeyConstraint("id")
    )
    # ### end Alembic commands ###

    op.bulk_insert(
        sa.table(
            "settings",
            sa.Column("id", sa.Integer),
            sa.Column("telegram", sa.JSON),
            sa.Column("discord", sa.JSON),
            sa.Column("webhook", sa.JSON),
            sa.Column("notfication_settings", sa.JSON),
            sa.Column("notfication_enable", sa.JSON),
            sa.Column("subscription", sa.JSON)
        ),
        [
            base_settings
        ],
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("settings")
    # ### end Alembic commands ###
